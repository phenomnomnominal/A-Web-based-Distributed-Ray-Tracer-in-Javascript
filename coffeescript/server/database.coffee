# *database.coffee* provides all database functionality, such as inserting render data in the [NoSQL](http://en.wikipedia.org/wiki/NoSQL) database and later retrieving it.
# ___

# ## Requires:
# Functionality in *database.coffee* requires access to the following [**node.js**](http://nodejs.org/) modules:

# * [**MongoDB**](http://www.mongodb.org/) - Scalable, High-Performance [**NoSQL**](http://en.wikipedia.org/wiki/NoSQL) database.
mongo = require 'mongodb'

# ___

# ## Constants:
# Some constants are required for this script:

# > * **`LOCATION`** - IP Address location for the server
LOCATION = '127.0.0.1'

# > * **`PORT`** - Port for database connections
PORT = 27017

# > * **`DATABASE_NAME`** - Name of the database to connect to
DATABASE_NAME = 'renderDB'

# ___

# ## Utility functions:

# ### *reportResult*:
# > **`reportResult`** logs the result of a database operation in the server console.
reportResult = (e, success) ->
  console.log if e? then "Error: #{e.message}" else "Success: #{success}"

# ___

# ## Initialisation:
# When [*index.coffee*](index.html) runs and the [**node.js**](http://nodejs.org/) server is initialised, this script is run, which initialises the [**MongoDB**](http://www.mongodb.org/) [**`Db`**](http://mongodb.github.com/node-mongodb-native/api-generated/db.html) and opens a connection to it.
server = new mongo.Server LOCATION, PORT, autoconnect: true
db = new mongo.Db DATABASE_NAME, server
db.open (error, connection) ->
  reportResult error, "Connected to #{DATABASE_NAME}"

# ___

# ## Database functions:

# ### <section id='insert'>*insertRenderIntoDatabase*:</section>
# > **`insertRenderIntoDatabase`** takes a `renderID` (a [**UUID**](http://en.wikipedia.org/wiki/Universally_unique_identifier) generated by [*uuid.js*](https://github.com/LiosK/UUID.js)) and the parsed `render` object and stores them as a new [**`collection`**](http://mongodb.github.com/node-mongodb-native/api-generated/collection.html) in the database.
insertRenderIntoDatabase = (renderID, render) ->
  db.createCollection renderID, safe:true, (error, collection) ->
    reportResult error, 'Collection created.'
    unless error?
      db.collection renderID, (error, collection) ->
        reportResult error, 'Collection selected.'
        unless error?
          collection.insert render, safe: true, (error, result) ->
            reportResult error, 'Render inserted.'

# ### <section id='find'>*findRenderInDatabase*:</section>
# > **`findRenderInDatabase`** searches for a `render` object that is assosciated with a given `renderID` using [**`collection.findOne`**](http://mongodb.github.com/node-mongodb-native/api-generated/collection.html#findone) and returns the object (if one is found) via [**WebSocket**](http://www.websocket.org/) to the client with the correct `sessionID`.
findRenderInDatabase = (renderID, sessionID) ->
  db.collection renderID, (error, collection) ->
    reportResult error, 'Collection selected.'
    unless error?
      collection.findOne uuid: renderID, (error, render) ->
        reportResult error, 'Render found.'
        unless error?
          server = require './server'
          socket = server.io.sockets.in sessionID
          socket.emit 'gotRender', render: render

# ___
# ## Exports:

# The [**`insertRenderIntoDatabase`**](#insert) and [**`findRenderInDatabase`**](#find) functions are added to the global `root` object.
root = exports ? this
root.insert = insertRenderIntoDatabase
root.find = findRenderInDatabase